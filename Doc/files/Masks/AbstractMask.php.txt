<?php
/**
* Abstract masks
*
* @package Validation
* @subpackage Masks 
* @author Kurapov Pavel <spawnrus56@gmail.com>
*/
namespace Menephis\MaskValidator\Masks;


use Menephis\MaskValidator\Exception\{ InvalidMaskException, FileNotFoundException};

/**
* AbstractMask class for extending
*/
abstract class AbstractMask
{
    /**
    * @var string $currentMask - points ot current mask 
    */
    protected $currentMask = 'default';
    /**
    * @var array $maskComposite - contain masks
    */
    protected $maskComposite = array();
    /**
    * GetMask will return mask array
    *
    * @return array $mask
    */
    public function getMask()
    {
        return $this->maskComposite[$this->currentMask] ?? null;
    }
    /**
    * Add mask 
    *
    * @param array $mask
    * @param string $maskName
    * @param bool $switchMask
    *
    * @return void 
    */
    public function addMask(array $mask, string $maskName, bool $switchMask = false)
    {
        $this->maskComposite[$maskName] = $mask;
        if($switchMask){
            $this->switchTo($maskName);
        }
    }
    /**
    * Switch current mask 
    *
    * @param mixed $maskName
    *
    * @return void
    */
    public function switchTo($maskName)
    {
        if( ! $this->maskComposite[$maskName])
            return false;
        $this->currentMask = $maskName;
    }
    /**
    * CheckMask for syntax
    *
    * @param array $mask
    *
    * @return self
    */
    public function checkMask(array $mask)
    {
        try
        {
            if(count($mask) === 0  or ! is_array($mask))
                throw new InvalidMaskException('Mask must be array and have at least one value');
            foreach($mask as $key => $value){
                // field exists
                if( ! (count($value === 3) and is_array($value) and key_exists('method', $value) and key_exists('arguments', $value) and key_exists('required', $value)))
                    throw new InvalidMaskException('Mask must be type of array and have three field: method, arguments, required');
                // check method type
                if( ! is_string($value['method']))
                    throw new InvalidMaskException('Value for method must be string type');
                // check arguments type
                if( ! (is_array($value['arguments']) or is_null($value['arguments'])))
                    throw new InvalidMaskException('Value for arguments must be array type or null');
                // check required type
                if( ! is_bool($value['required']))
                    throw new InvalidMaskException('Value for required must be boolean type');
            }
        return $this;
        }catch(InvalidMaskException $e)
        {
            throw $e;
        }
    }
    /**
    * Loading mask from yaml file
    *
    * @param string $path
    * @param mixed $maskName
    * @param boolean $switchMask - switched current mask to passed mask
    *
    * @return array - mask in array or false on failure
    */
    public function loadFromYaml(string $path, $maskName, bool $switchMask = false)
    {
        if( ! is_file($path))
            throw new FileNotFoundException(sprintf('No such file on path - %s', $path));
        $yaml = \Spyc::YAMLLoad($path);
        $this->maskComposite[$maskName] = $yaml;
        if($switchMask){
            $this->currentMask = $maskName;
        }
    }
}
?>
